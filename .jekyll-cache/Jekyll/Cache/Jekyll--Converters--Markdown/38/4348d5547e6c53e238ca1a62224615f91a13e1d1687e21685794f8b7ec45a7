I"w<<h2 id="가장-기본적인-틀">가장 기본적인 틀</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 이 부분에 풀이를 작성한다.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>경진대회를 위한 가장 기본적인 틀이다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span></code></pre></div></div>

<p>g++ 컴파일러의 기능으로, 표준 라이브러리 전체를 포함시킨다.</p>

<p>흔히 우리가 사용하는 iostream, vector, algorithm 등의 라이브러리를 개별적으로 포함시키지 않아도 자동으로 사용할 수 있게된다.</p>

<h2 id="입력과-출력">입력과 출력</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 입력 속도 향상</span>
<span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

<span class="c1">// 공백을 포함한 채로 입력을 읽기</span>
<span class="n">string</span> <span class="n">s</span><span class="p">;</span>
<span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>

<span class="c1">// 데이터 양을 사전에 알 수 없다면,</span>
<span class="k">while</span> <span class="p">(</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// code</span>
<span class="p">}</span>

<span class="c1">// 출력</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>

<span class="c1">// 몇몇 대회 시스템에선 파일을 사용</span>
<span class="n">freopen</span><span class="p">(</span><span class="s">"input.txt"</span><span class="p">,</span> <span class="s">"rt"</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
<span class="n">freopen</span><span class="p">(</span><span class="s">"output.txt"</span><span class="p">,</span> <span class="s">"wt"</span><span class="p">,</span> <span class="n">stdout</span><span class="p">);</span>
</code></pre></div></div>

<p>cin 을 사용하는 경우 scanf 보다 간편하게 사용가능하지만 가끔 입출력이 너무 많은 경우 프로그램 병목현상이 생길 수 있다.</p>

<p>이를 방지하기 위해 위의 두 줄을 main함수 맨 위에 추가해주면 훨씬 빠른 입출력을 사용할 수 있다.</p>

<p><strong>이때 주의할 점은 C언어 입출력 함수인 scanf, printf 와 섞어서 사용하면 안 된다.</strong></p>

<h2 id="수를-처리하는-방법">수를 처리하는 방법</h2>

<h3 id="정수"><em>정수</em></h3>
<p>경진 프로그래밍에서 가장 많이 사용하는 정수 자료형은 <strong>int</strong> 이다. 만약 int 로 부족하다면 <strong>long long</strong> 을 사용하면 된다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// long long, 접미사 LL 을 붙여야 한다.</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">123456789123456789LL</span><span class="p">;</span>

<span class="c1">// 종종 하는 실수</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">123456789</span><span class="p">;</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">a</span><span class="p">;</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// -1757895751</span>
</code></pre></div></div>

<p>큰 값을 저장하기 위해 long long 을 사용했지만 흔히 하는 실수로 int 형 a 를 제곱해서 b 에 저장하면 long long 이 될 것 같지만, 실제로는 ing 형이 된다.</p>

<p>이 경우에는 두 가지 해결 방법이 있는데</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// first</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">123456789LL</span><span class="p">;</span>
<span class="p">...</span>

<span class="c1">// second</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">123456789</span><span class="p">;</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">a</span> <span class="o">*</span> <span class="n">a</span><span class="p">;</span>
</code></pre></div></div>
<p><br /></p>
<h3 id="나머지-연산"><em>나머지 연산</em></h3>

<p>문제의 답 자체는 매우 큰 정수지만, 그 값을 ‘모듈로(modulo) m’을 구하기만 하면 충분한 경우도 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x mod m : x 를 m 으로 나눈 나머지라할 때 다음이 성립한다.

(a+b) mod m = (a mod m + b mod m) mod m
(a-b) mod m = (a mod m - b mod m) mod m
(a*b) mod m = (a mod m * b mod m) mod m
</code></pre></div></div>

<p>예를 들면, 23 mod 4 를 구해보자.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>23 mod 4 = 3
23 mod 4 = (17 + 6) mod 4
         = (17 mod 4 + 6 mod 4) mod 4
         = (1 + 2) mod 4
         = 3
</code></pre></div></div>

<p>이를 응용하면, n 팩토리얼의 m 으로 나눈 나머지를 구하는 코드를 짤 수 있다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="kt">long</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="n">m</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
</code></pre></div></div>

<p>일반적으로 나머지는 0, … , m-1 범위를 기대하지만 음수의 나머지를 0 이나 음수로 처리하는 경우도 있다. 나머지가 음수가 되지 않도록 하는 간단한 방법은 우선 평소대로 나머지 연산을 진행한 후 그 결과가 음수라면 m 을 더해주는 것이다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">x</span> <span class="o">+=</span> <span class="n">m</span><span class="p">;</span>
</code></pre></div></div>

<p><br /></p>
<h3 id="부동-소수점-실수"><em>부동 소수점 실수</em></h3>
<p>대부분의 경진 프로그래밍 대회는 정수만 사용해도 풀 수 있지만, 간혹 부동 소수점 실수가 필요할 때도 있다. 이 때 유용한 것이 64bit <strong>double</strong> 이다. g++ 컴파일러는 80bit <strong>long double</strong>도 지원한다.</p>

<p>대부분의 문제 본문에는 답을 어느 정도의 정밀도로 구해야하는지 나와있다. 이에 맞춰 답을 <strong>printf</strong> 함수로 사용해 명시할 수 있다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"%.9f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</code></pre></div></div>

<p><em>부동 소수점 실수를 사용할 때 항상 염두해야하는 것이 오차가 생기는 실수가 존재한다는 점이다.</em></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.3</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="mf">0.1</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%.20f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span> <span class="c1">// 0.999999999999998898..</span>
</code></pre></div></div>

<p>부동 소수점 실수를 == 연산자를 이용하여 비교하는 것은 위험한데, 실제로 값이 일치하는 경우도 있지만, 정밀도 오류로 인해 결과가 다르게 나올 수 있다. 이 때는 두 실수의 차이가 ε 보다 작을 때, 서로 일치한다고 판단하는 것이다. ε 는 아주 작은 값이며, 아래 코드에서 ε = 10^-9 이다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">1e-9</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// a == b</span>
<span class="p">}</span>
</code></pre></div></div>

<p>부동 소수점 실수가 부정확하긴 하지만 특정 범위의 정수는 정확하게 표현 가능하다.</p>

<h2 id="코드-짧게-만들기">코드 짧게 만들기</h2>

<h3 id="자료형"><em>자료형</em></h3>

<p><strong>typedef</strong> 명령어를 이용하면 자료형의 이름을 짧게 만들 수 있다.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>

<span class="n">ll</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1234566789ll</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vi</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pi</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="매크로"><em>매크로</em></h3>

<p><strong>#define</strong> 지시문을 이용하여 매크로를 정의할 수 있다.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define F first
#define S second
#define PB push_back
#define MP mark_pair
</span>
<span class="c1">// before</span>
<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">y1</span><span class="p">,</span> <span class="n">x1</span><span class="p">));</span>
<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">y2</span><span class="p">,</span> <span class="n">x2</span><span class="p">));</span>
<span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span> <span class="o">+</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>

<span class="c1">// after</span>
<span class="n">v</span><span class="p">.</span><span class="n">PB</span><span class="p">(</span><span class="n">MP</span><span class="p">(</span><span class="n">y1</span><span class="p">,</span> <span class="n">x1</span><span class="p">));</span>
<span class="n">v</span><span class="p">.</span><span class="n">PB</span><span class="p">(</span><span class="n">MP</span><span class="p">(</span><span class="n">y2</span><span class="p">,</span> <span class="n">x2</span><span class="p">));</span>
<span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">F</span> <span class="o">+</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">S</span><span class="p">;</span>
</code></pre></div></div>

<p>매크로에 인자를 줄 수도 있으며, 이를 이용해 반복문이나 그 밖의 구조문을 짧게 만들 수 있다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define REP(i, a, b) for (int i = a; i &lt;= b; i++)
</span>
<span class="c1">// before</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// code</span>
<span class="p">}</span>

<span class="c1">// after</span>
<span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// code</span>
<span class="p">}</span>
</code></pre></div></div>
:ET